Musterklausur 1.1

Aufgabe 1
a=4
b=8
x=5
erg=4

Aufgabe 2
#include <iostream>

using namespace std;

int main(){
    string worte[4]={"katze", "hund", "maus","pferd"};
    string lowest = "";
    int x=0;
    int y=0;

    while(x<3){
        y = x+1;
        while(y<4){
            if(worte[x] < worte[y]){
                lowest = worte[x];
                worte[x] = worte[y];
                worte[y] = lowest;
            }
            y++;
        }
        x++;
    }

    for(int i=0;i<4;i++)
        cout << "Wort: " << worte[i] << endl;
};


Musterklausur 2.1

1)
vor dem Tausch : a = 10 , b = 20
nach dem Tausch : a = 20 , b = 10
-----------------------------
nach dem Tausch in der main- funktion : 
a = 10
b = 20

2)
#include <iostream>

using namespace std;

int main(){
    int zahl1 = 0;
    int zahl2 = 0;
    cout << "Bitte beide Zahlen eingeben:" << endl;
    cin >> zahl1;
    cin >> zahl2;

    int gerundet =0;
    int ganzzahl =0;
    int rest;

    gerundet = zahl1 / zahl2;
    rest = zahl1 % zahl2;
    if(rest >= zahl2 / 2)
        gerundet++;

    cout << zahl1 << " : " << zahl2 << " = " << gerundet << endl;
};

Aufgabe 3:
maximum(maximum(z1,z2),z3);

Aufgabe 4:
#include <iostream>

using namespace std;

int main(){
    string wort;
    int verschFaktor;

    char verschl[10];

    cout << "Geben Sie bitte ein Wort ein (max. 10 Zeiche):" <<endl;
    cin >> wort;
    cout << "Wählen Sie einen Verschiebefaktor:" <<endl;
    cin >> verschFaktor;

    for(int i=0;i<10;i++){
        verschl[i] = wort[i]+verschFaktor;
    }

    cout << "Verschlüsselt: " << verschl <<endl;
}

Aufgabe 5:
n1 = 6
n2 = 6,25

Aufgabe 6:
Konstruktoren werden bei initialisierung einer Klasse aufgerufen und können initiale werte setzen
Defaultparameter sind dazu da, wenn keine weitere Definition kommt trotzdem 
ein Wert vorhanden istream

Aufgabe 7:
7.1 
class Mitarbeiter{
private:
    int persNr;
    string name;
    char geschlecht;

    Termin *termine[]; 
public:
    ~Mitarbeiter(){
        cout << "Im Destruktor" << endl;
        delete [] termine;
    };

    friend ostream& operator<<(ostream &aus, const Mitarbeiter &m){
        cout << m.name <<endl;
    };
}

Komplexaufgabe 2 (1.1):
// Position -----------------------------------------------------------------------------------------------------
// Header 
#include <iostream>
using namespace std;

class Position{
private:
    Artikel m_artikel;
public:
    double getPositionsSumme();
    friend ostream& operator<<(ostream &aus, const Position &pos);
};

// CPP
#include <iostream>
using namespace std;

double Position::getPositionsSumme(){
    double wert;
    wert = menge * m_artikel.getPreis();
    return wert;
};

ostream& operator<<(ostream &aus, const Position &pos){
    return << "die Werte nur rauswerfen";
};

// Angebot -----------------------------------------------------------------------------------------------------
// Header 
#include <iostream>
#include <vector>
using namespace std;

class Angebot{
private:
    string m_nummer;
    bool m_zustand;

    Bearbeiter m_bearbeiter;
    vector<Position*> allePositionen;
public:
    Angebot(bool z, string n);

    bool hatNummer(string nummer);
    double getAngebotsSumme();
    void positionHinzu(Position *p_position);
    string getNameBearbeiter();

    friend ostream& operator<<(ostream &aus, const Angebot &ang);
};

// CPP
#include <iostream>
using namespace std;

Angebot::Angebot((bool z, string n)):m_zustand(z),m_nummer(n) {};

 bool Angebot::hatNummer(string nummer){
    bool b = false;
    if(nummer == m_nummer)
        b = true;
    return b;
 };

 double Angebot::getAngebotsSumme(){
    double wert;
    for(int i=0;i< allePositionen.size();i++){
        wert += allePositionen[i]->getPositionsSumme();
    }
    return wert;
 };

  void Angebot::positionHinzu(Position *p_position){
        allePositionen.push_back(p_position);
 };

 string Angebot::getNameBearbeiter(){
        return m_bearbeiter.getName();
 };

 ostream& operator<<(ostream &aus, const Angebot &ang){
    o << "";

    for(int i=0;i< allePositionen.size();i++){
        // Zeilen anfügen an o
    }
    o << "Angebotssnummer   " << ang.getAngebotsSumme() << endl;
    return o;
 };

 
// Angebotscontainer -----------------------------------------------------------------------------------------------------
#include <iostream>
#include <vector>
using namespace std;

class Angebotscontainer{
private:
    vector<Angebot*> alleAngebote;
public:
    vector<Angebot*> getAlleAngebote();
    void angebotHinzu(Angebot* ang);
    Angebot* getAngebot(string angebotsNr);
};

// CPP
#include <iostream>
#include <vector>
using namespace std;

Angebot* Angebotscontainer::getAngebot(string angebotsNr){
    Angebot* p_angebot;
    for(int i=0;i<alleAngebote.size();i++){
        if(alleAngebote.at(i)->hatNummer(angebotsNr)){
            p_angebot = alleAngebote.at(i);
        }
    }
    return p_angebot;
};

Aufgabe 7 (2.1)
#include <iostream>
#include <vector>
using namespace std;

class Mitarbeiter{
private:
    vector<Termin*> alleTermine;
public:
    ~Mitarbeiter(){
        for(int i=0; i<alleTermine.size();i++){
            if(alleTermine.at(i) !=0){
                delete alleTermine.at(i);
                alleTermine.at(i) =0;
            }
         }
    }

    friend ostream& operator<<(ostream &aus, const Mitarbeiter &m){
        o << "Personalnummer: " << persNr << endl;
        o << "Name: " << name << endl;

        for(int i=0; i<alleTermine.size();i++){
            o << *m.alleTermine.at(i) << m.alleTermine.at(i)->getDatum() << endl;
         }

        return o;
    }
}


Komplexaufgabe 2 (2.1)


// Wahlfach -----------------------------------------------------------------------------------------------------

// Header Datei
using namespace std;

class Wahlfach{
private:
    int maxAnzahlStudenten;
    int aktuelleAnzahlStudenten;
public:
    bool istNochPlatzfürEinenStudent();
};

// CPP Datei
#include <iostream>
#include <vector>
using namespace std;

bool Wahlfach::istNochPlatzfürEinenStudent(){
    bool b = false;
    if(aktuelleAnzahlStudenten < maxAnzahlStudenten){
        b=true;
    }
    return b;
};

// Student -----------------------------------------------------------------------------------------------------
class Student{
private:
    int matrikelNr;
    string name;
    Anschrift a_wert;
    GebDat g_wert;

    vector<Note*> alleNoten;
public:
    Student(int m, string n, Anschrift a, GebDat g);
    bool MatrikelNrGleich(int m);
    double getDurchschnittsnote();
    vector<Note*> getAlleNoten();
    void trageNoteEin(double note, int fachNr, string fachbez);

    friend ostream& operator<<(ostream &aus, const Student &s);
};

// CPP Datei
#include <iostream>
#include <vector>
using namespace std;

Student::Student(int m, string n, Anschrift a, GebDat g)
    :name(n), matrikelNr(m),a_wert(a), g_wert(g)  {};


 bool Student::MatrikelNrGleich(int m){
    bool b = false;
    if(m == matrikelNr){
        b=true;
    }
    return b;
 };

double Student::getDurchschnittsnote(){
    double gesamtWert;
    double anzahl = alleNote.size();

    for(int i=0; i< anzahl;i++){
        gesamtWert += alleNoten.at(i)->getNote();
    }

    return (gesamtWert / anzahl);
};

vector<Note*> Student::getAlleNoten(){ return alleNoten; };

void Student::trageNoteEin(double note, int fachNr, string fachbez){
    
    Fach f(fachNr, fachBez);
    Note* n = new Note(note, f);

    alleNoten.push_back(n);
}

ostream& operator<<(ostream &aus, const Student &s) {
    o<<"";
// Alle Daten ausgeben
    return o;
}

// StudentContainer -----------------------------------------------------------------------------------------------------
class StudentContainer{
private:
    vector<Student*> alleStudenten;
public:
    StudentContainer(vector<Student*> studenten);
    void fuegeStudentHinzu(int matrikel, string name, GebDat datum, Anschrift anschrift);
    Student getStudent(int nummer);
    vector<Note*> getAlleNotenEinesStudent(int nummer);
    string ermittleBestenStudenten();
    vector<string> getAlleStudenten(string ort);

    friend ostream& operator<<(ostream &aus, const StudentContainer &s);
};

// CPP Datei
#include <iostream>
#include <vector>
using namespace std;

StudentContainer::StudentContainer(vector<Student*> studenten)
    : alleStudenten(studenten){ };


void StudentContainer::fuegeStudentHinzu(int matrikel, string name, GebDat datum, Anschrift anschrift){
    Student* stud = new Student(matrikel, name,datum,anschrift);

    alleStudenten.push_back(stud);
};

Student StudentContainer::getStudent(int nummer){
    Student* std;

    for(int i=0;i<alleStudenten.size();i++){
        if(alleStudenten.at(i)->getMatrikelnummer == nummer){
            std = alleStudenten.at(i);
        }
    }

    return *std;
};

vector<Note*> StudentContainer::getAlleNotenEinesStudent(int nummer){
    Student std = getStudent(nummer);

    return std.getAlleNoten();
};

string StudentContainer::ermittleBestenStudenten(){
    string s;
    double niedrigesterSchnitt = 10;

    for(int i=0;i<alleStudenten.size();i++){
        double hilfsWert = alleStudenten.at(i)->getDurchschnittsnote();
        if(hilfsWert < niedrigesterSchnitt){
            s = alleStudenten.at(i)->getName();
            niedrigesterSchnitt = hilfsWert;
        }
    }

    return s;
};

vector<string> StudentContainer::getAlleStudenten(string ort){
    vector<string> vec;

    for(int i=0;i<alleStudenten.size();i++){
        if(alleStudenten.at(i)->getOrt() == ort){
            vec.push_back(alleStudenten.at(i)->getName());
        }
    }

    return vec;
};

ostream& operator<<(ostream &aus, const StudentContainer &s) {
    o<<"";
// Alle Daten ausgeben
    return o;
};


int main(){
    vector<Student*> initVEc;

    StudentContainer vecStudenten(initVEc);
    
    // Address und GEburtdatum initialisieren und an Funktion weitergeben

    //vecStudenten.fuegeStudentHinzu()
};

Komplexaufgabe 4 (2.1)
// Showable -----------------------------------------------------------------------------------------------------

// .h 
#include <iostream>
#include <vector>
using namespace std;
class Showable{
public:
	Showable();
	virtual void gibtAus() =0;
}

// Kunde -----------------------------------------------------------------------------------------------------

// .h 
#include <iostream>

using namespace std;

class Kunde{
private:
	string name;
	string vorname;
	Datum* kunde_seit;
public:
	Kunde(string n, string v, Datum* d);
	
	bool kundeGleich(string name);
	void gibtAus();
	void anzeigen(string nachNacme, Kunde k);
	
	friend ostream& operator<<(ostream &aus, const Kunde &k);
	friend void operator>(Kunde &k1, Kunde &k1);
}

// .cpp 
#include <iostream>
#include <vector>
using namespace std;

Kunde(string n, string v, Datum* d);
		: Showable(), name(n), vorname(v), kunde_seit(d);

bool Kunde::kundeGleich(string n){
	bool b = false;
	if(n == name){
		b = true;
	}	
	return b;
};

void Kunde::gibtAus()
	cout << *this << endl;
};

void Kunde::anzeigen(string nachNacme, Kunde k){
	o << "Der Kunde " << nachNacme << " hat folgende Daten" << endl;
	cout << *this << endl;
};

ostream& operator<<(ostream &aus, const Kunde &k){
	Kundendaten
	...
	
};

Aufgabe 2 (3.1)

#include <iostream>

using namespace std;

int main(){
    int input;
    string weitermachen = "ja";

    while(weitermachen == "ja"){
        cout << "Bite eine Zahl zwischen 1 und 10 eingeben." << endl;
        cin >> input;

        for(int i=1;i<=10;i++){
            int ergeb = i * input;
            cout << i << " x " << input << " = " << ergeb << endl;
        }
        
        cout << "Wollen Sie weitermachen (ja/nein)";
        cin >> weitermachen;
    }
};

Aufgabe 3 (3.1)

#include <iostream>

using namespace std;

int main(){
    int input;
    string weitermachen = "ja";

    while(weitermachen == "ja"){
        cout << "Bite eine Zahl zwischen 1 und 100 eingeben." << endl;
        cin >> input;

        if(input < 101 && input > 0){
            
            cout << input << " (10) = ";
            int hilfsvariable = input;
            while(hilfsvariable > 1){
                    int rest = hilfsvariable % 2;
                    cout << rest;
                    hilfsvariable = hilfsvariable / 2;
            }

            cout << " (2)" << endl;
        }
        
        cout << "Erneute Eingabe erwünscht (ja/nein) ";
        cin >> weitermachen;
    }
};

Aufgabe 4 (3.1)

friend ostream& operator<< (ostream &aus, Anschrift &a){
    return << "Ort: " << a.m_ort << ", Strasse: "<< a.m_strasse;
};
friend ostream& operator<< (ostream &aus, Anschrift *p_a){
    return << "Ort: " << a->m_ort << ", Strasse: "<< a->m_strasse;
};

// Statisches 
cout << a;
cout << &a;


// Dynamisches 
cout << *a;
cout << a;

Aufgabe 5 (3.1)
cout << addition(addition(z1,z2),addition(z3,z4));

Komplexaufgabe 2 (3.1)


// Mitarbeiter -----------------------------------------------------------------------------------------------------
#include <iostream>
#include <vector>

usnig namespace std;

class Mitarbeiter{
private:
    int nr;
    string name;
    Datum dats[2];
    vector<Kontaktdaten> alleKontaktdaten;
    Abteilung abteilung;
public:
    Mitarbeiter();
    Mitarbeiter(int n, string nm, Datum geb, Datum eins, Abteilung abt):
        nr(n),name(nm), abteilung(abt)
        {
            dats[0] = geb;
            dats[1] = eins;
        };

    void kontaktAendern(string bezAlt, string bezNeu){
        for(int i=0;i<alleKontaktdaten.size();i++){
            if(alleKontaktdaten.at(i).getBezeichnung() == bezAlt){
                alleKontaktdaten.at(i).setBezeichnung(bezNeu);
            }
        }
    };

    friend ostream& operator<<(ostream &aus, const Mitarbeiter &m){
        cout << m.nr << " " << ....
    };
};

// Angestellter -----------------------------------------------------------------------------------------------------
// Header
#include <iostream>
#include <vector>

usnig namespace std;

class Angestellter: public Mitarbeiter{
public:
    Angestellter(int n, string nm, Datum geb, Datum eins, Abteilung abt, double g)
        :Mitarbeiter(n,nm,geb,eins, abt) , gehalt(g){};
};

// MitarbeiterContainer -----------------------------------------------------------------------------------------------------
// Header
#include <iostream>
#include <vector>

usnig namespace std;

class MitarbeiterContainer{
private:
    vector<Mitarbeiter*> alleMitarbeiter;
public:
    MitarbeiterContainer(){};
    
    void mitarbeiterHinzu(Mitarbeiter* m){alleMitarbeiter.push_back(m);};

    bool istMitarbeiterInContainer(int nr){
        bool b = false;
        for(int i=0;i<alleMitarbeiter.size();i++){
            if(alleMitarbeiter.at(i)->getNr() == nr){
                b = true;
            }
        }
        return b;
    };

    void kontaktHinzu(int nr, string bez, string wert){
        Kontaktdaten k(bez, wert);
        for(int i=0;i<alleMitarbeiter.size();i++){
            if(alleMitarbeiter.at(i)->getNr() == nr){
                alleMitarbeiter.at(i)->kontaktHinzu(k);
            }
        }
    };
};

int main(){
    MitarbeiterContainer cont;

    Abteilung a("","");
    Datum dt1(25,05,1999);
    Datum dt2(25,05,2008);

    Angestellter ang(1,"Hendrik", dt1, dt2, a,2000);

    
    13/ ja, in der Methode alles anzeigen 
    Polymorphie kommt bei Vererbungen und abstrakten Klassen vor. Späte Bindung ...
    Gleiche Methode bin mit gleicher Signatur in unterschiedlichen Klassen und unterschiedlicher implementierung
};

Komplexaufgabe 3 (3.1)

#include <iostream>

using namespace std;

class Fahrzeug(){
private:
    string bezeichnung;
    int ps;
    double normalPreis;
    static int anzahlVermietungen;
public:
    Fahrzeug(string b, int p, double preis)
        : bezeichung(b), ps(p), normalPreis(preis) {};

    static int getAnzahlVermietungen(){ return anzahlVermietungen; };

    void vermieten(){ anzahlVermietungen++; };

    virtual double getVermietungskostenProTag() = 0;

    friend ostream& operator<< (ostream &aus, const Fahrzeug &f){
        // ausgabe aller daten
    };
};

class PKW: public Fahrzeug{
private:
    string getriebeArt;
    static int anzahlVermietungen;
public:
    PKW(string b, int p, double preis, string get)
        :Fahrzeug(b,p,preis), getriebeArt(get) {};

    static int getAnzahlVermietungen()
    { return anzahlVermietungen; };

    void vermieten(){
        Fahrzeug::vermieten();
        anzahlVermietungen++;
    };            
};

class Limousine: public PWK{
private:
    static int anzahlVermietungen;

public:
    Limousine(string b, int p, double preis, string get)
        :PKW(b,p,preis,get){};

    void vermieten(){
        PWK::vermieten();
        anzahlVermietungen++;
    };   

    double getVermietungskostenProTag(){
        double wert = getVermietungskostenProTag();
        if(getBezeichnung() == "Mittelklasse")
            wert +=10;
        else if (getBezeichnung() == "Luxusklasse")
            wert+=20;
        return wert;
    };

    void ausgabe(){
        cout << *this;
    };
};

int main(){
    Limousine l1(..);
    Limousine* l2 = new Limousine(...);

    cout <<"FAhrzeug: " << Fahrzeug::getAnzahlVermietung;
    cout <<"Limo: " << Limousine::getAnzahlVermietung;

    vector<Fahrzeug*> lst;

    for(int i=0;i<lst.size();i++){
        cout << *lst.at(i) << endl;
    }
};

Komplexaufgabe 4 (3.1)

#include <iostream>

using namespace std;

class MyArray{
private:
    int m_arraySize;
    int m_index;
    int* m_p_array;
public:
    MyArray(int arrSize): {
        m_arraySize = arrSize;
        m_index = -1;
        m_p_array = new int [arrSize];
    };

    int getArraySize(){ return m_arraySize; };

    void einfügen(int value){
        if(m_index == -1)
            m_index++;

        if(m_index >= m_arraySize){
            cout << "Array ist voll" << endl;
            return;
        }
        else{
            *(m_p_array + m_index) = value;
            m_index++;
        }
    };

    void inhalteLoeschen(){
        if(m_index == -1){
            cout << "Array ist leer" << endl;
            return;
        }

        for(int i=0;i<m_arraySize;i++){
            *(m_p_array + i) = 0;
        }
        m_index = -1;
    };

    void anzeigen(){
        if(m_index == -1){
            cout << "Array ist leer" << endl;
            return;
        }

        for(int i=0;i<m_arraySize;i++){
            cout << *(m_p_array + i) << endl;
        }
    };

    bool isEmpty(){
        if(m_index == -1){
            return true;
        }
        else{
            return false;
        }
    };

    bool isFull(){
        if(m_index >= m_arraySize){
            return true;
        }
        else{
            return false;
        }
    };

    bool istImArray(int value){
        if(m_index == -1){
            cout << "Array ist leer" << endl;
            return;
        }

        bool b = false;
        for(int i=0;i<m_arraySize;i++){
            if(*(m_p_array + i) == value){
                b = true;
            }
        }
        return b;
    };

    void aendereWert(int index, int value){
        if(index < 0 || index >= m_arraySize){
            cout << "Index nicht im Bereich des Arrays" << end;
            return;
        }
        *(m_p_array + index) = value;
    };
};

int main(){
    MyArray myArr(5);
    int arr[5] = {50,51,52,53,54};

    for(int i=23;i<28;i++){
        myArr.einfügen(i);
    };

    int arrA[5][3] = {
        {1,2,3},
        {4,5,6},
        {7,8,9},
        {10,11,12},
        {13,14,15}
    };

    int arrB[3][5];
    int hilfX, hilfY;

    for(int i=0;i<5;i++){
        for(int t=0;t<3;t++){
            arrB[hilfY][hilfX] = arrA[i][t];
            if(hilfX >= 4){
                hilfY++;
                hilfX=0;
            }
            else{
                hilfX++;
            }
        }
    }
};